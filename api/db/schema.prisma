datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
  directUrl = env("DIRECT_DB_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = "native"
  previewFeatures = ["multiSchema"]
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.
// TODO: Please remove the following example:

// Enums Start

enum ClimbingStyle {
  Sport
  Trad
  Bouldering
  Aid
  Ice
  Mixed

  @@schema("public")
}

enum GradeYDS {
  YDS_50
  YDS_51
  YDS_52
  YDS_53
  YDS_54
  YDS_55
  YDS_56
  YDS_57
  YDS_58
  YDS_59
  YDS_510
  YDS_511
  YDS_512
  YDS_513
  YDS_514
  YDS_515
  YDS_516
  YDS_517
  YDS_518
  YDS_519
  YDS_520

  @@schema("public")
}

enum GradeFont {
  Font_3
  Font_4A
  Font_4B
  Font_4C
  Font_5A
  Font_5B
  Font_5C
  Font_6A
  Font_6Aplus
  Font_6B
  Font_6Bplus
  Font_6C
  Font_6Cplus
  Font_7A
  Font_7Aplus
  Font_7B
  Font_7Bplus
  Font_7C
  Font_7Cplus
  Font_8A
  Font_8Aplus
  Font_8B
  Font_8Bplus
  Font_8C
  Font_8Cplus
  Font_9A
  Font_9Aplus
  Font_9B
  Font_9Bplus
  Font_9C
  Font_9Cplus

  @@schema("public")
}

enum GradeHueco {
  Hueco_VB
  Hueco_V0
  Hueco_V1
  Hueco_V2
  Hueco_V3
  Hueco_V4
  Hueco_V5
  Hueco_V6
  Hueco_V7
  Hueco_V8
  Hueco_V9
  Hueco_V10
  Hueco_V11
  Hueco_V12
  Hueco_V13
  Hueco_V14
  Hueco_V15
  Hueco_V16
  Hueco_V17

  @@schema("public")
}

enum GradeFrenchSport {
  FS_1
  FS_2a
  FS_2b
  FS_2c
  FS_3a
  FS_3b
  FS_3c
  FS_4a
  FS_4b
  FS_4c
  FS_5a
  FS_5b
  FS_5c
  FS_6a
  FS_6a_plus
  FS_6b
  FS_6b_plus
  FS_6c
  FS_6c_plus
  FS_7a
  FS_7a_plus
  FS_7b
  FS_7b_plus
  FS_7c
  FS_7c_plus
  FS_8a
  FS_8a_plus
  FS_8b
  FS_8b_plus
  FS_8c
  FS_8c_plus
  FS_9a
  FS_9a_plus
  FS_9b
  FS_9b_plus
  FS_9c

  @@schema("public")
}

enum ProductCondition {
  New
  LikeNew
  Good
  Fair
  Poor

  @@schema("public")
}

enum CragType {
  Sport
  Trad
  Bouldering
  Mixed

  @@schema("public")
}

enum GymType {
  Bouldering
  RopedClimbing
  Combined

  @@schema("public")
}

enum Rating {
  OneStar
  TwoStars
  ThreeStars
  FourStars
  FiveStars

  @@schema("public")
}

enum SustainabilityCondition {
  Excellent
  Good
  Fair
  Poor
  VeryPoor

  @@schema("public")
}

//Enums end

// MODELS START

model User {
  id        String           @id @db.Uuid
  email     String           @unique
  name      String?
  avatar    String?
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  diaries   Diary[]
  ownedGyms Gym[]            @relation("OwnedGyms")
  Listing   Listing[]
  ownedComs CommunityOwner[]

  @@schema("public")
}

model Diary {
  id            Int            @id @default(autoincrement())
  date          DateTime
  isPublic      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        String
  climbedRoutes ClimbedRoute[]

  @@schema("public")
}

model Route {
  id                   Int                      @id @default(autoincrement())
  name                 String
  grade                String
  location             String
  style                ClimbingStyle
  gradeYDS             GradeYDS?
  gradeFont            GradeFont?
  gradeHueco           GradeHueco?
  gradeFrenchSport     GradeFrenchSport?
  sustainabilityRating SustainabilityCondition?
  description          String?
  images               String[]
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  crag                 Crag                     @relation(fields: [cragId], references: [id])
  cragId               Int
  diaries              ClimbedRoute[]

  @@schema("public")
}

model ClimbedRoute {
  id      Int   @id @default(autoincrement())
  diaryId Int
  routeId Int
  diary   Diary @relation(fields: [diaryId], references: [id])
  route   Route @relation(fields: [routeId], references: [id])

  @@unique([diaryId, routeId])
  @@schema("public")
}

model Crag {
  id        Int      @id @default(autoincrement())
  name      String
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  routes    Route[]
  area      Area     @relation(fields: [areaId], references: [id])
  areaId    Int
  cragType  CragType

  @@schema("public")
}

model Area {
  id          Int         @id @default(autoincrement())
  name        String
  country     Country     @relation(fields: [countryCode], references: [code])
  countryCode String
  crags       Crag[]
  gyms        Gym[]
  communities Community[]

  @@schema("public")
}

model Country {
  code  String @id @db.VarChar(2)
  name  String
  areas Area[]

  @@schema("public")
}

model Gym {
  id          Int      @id @default(autoincrement())
  name        String
  location    String
  description String?
  rating      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation("OwnedGyms", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId     String
  area        Area     @relation(fields: [areaId], references: [id])
  areaId      Int

  @@schema("public")
}

model Community {
  id          Int     @id @default(autoincrement())
  name        String
  location    String
  description String?
  rating      Rating?

  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  owners    CommunityOwner[]
  area      Area             @relation(fields: [areaId], references: [id])
  areaId    Int

  @@schema("public")
}

model CommunityOwner {
  communityId Int
  community   Community @relation(fields: [communityId], references: [id])
  userId      String
  User        User      @relation(fields: [userId], references: [id])

  @@id([communityId, userId])
  @@schema("public")
}

model Listing {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  price       Float
  condition   ProductCondition
  images      String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  product     Product          @relation(fields: [productId], references: [id])
  productId   Int

  @@schema("public")
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  category    String
  brand       String
  description String?
  condition   ProductCondition
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  listings    Listing[]

  @@schema("public")
}

